import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from measure_performance import measure_performance

class Solution:
    def findMaximumXOR(self, nums):
        x = 0
        for k in range(31, -1, -1):
            x <<= 1
            prefixes = {num >> k for num in nums}
            x |= any((x ^ 1) ^ p in prefixes for p in prefixes)
        return x

    def test_findMaximumXOR(self):
        test_cases = [
            ([3,10,5,25,2,8], 28),
            ([0], 0),
            ([2,4], 6),
            ([8,10,2], 10),
            ([14,70,53,83,49,91,36,80,92,51,66,70], 127),
            ([1,2,3,4,5,6,7,8,9,10], 15),
            ([0,1,2,3,4,5,6,7,8,9,10], 15),
            ([1,1,1,1], 0),
            ([1,2,4,8,16,32,64,128], 129),
            ([2147483647,0], 2147483647),
            ([0,2147483647], 2147483647),
            ([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], 31),
            ([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], 31),
            ([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32], 63),
            ([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40], 63),
            ([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], 63),
            ([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100], 127),
            ([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100], 127),
        ]
        passed = 0
        for idx, (nums, expected) in enumerate(test_cases, 1):
            result = self.findMaximumXOR(nums)
            if result == expected:
                print(f"Test case {idx} passed.")
                passed += 1
            else:
                print(f"Test case {idx} failed: input={nums}, expected={expected}, got={result}")
        print(f"Passed {passed}/{len(test_cases)} test cases.")

@measure_performance
def run_tests():
    sol = Solution()
    sol.test_findMaximumXOR()

if __name__ == "__main__":
    run_tests()
