import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from measure_performance import measure_performance

class Solution:
    def getSkyline(self, buildings):
        import heapq
        events = []
        for l, r, h in buildings:
            events.append((l, -h, r))
            events.append((r, 0, 0))
        events.sort()
        res = [[0, 0]]
        heap = [(0, float('inf'))]
        for x, negH, R in events:
            while heap[0][1] <= x:
                heapq.heappop(heap)
            if negH:
                heapq.heappush(heap, (negH, R))
            if res[-1][1] != -heap[0][0]:
                res.append([x, -heap[0][0]])
        return res[1:]

    def test_getSkyline(self):
        test_cases = [
            ([[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]], [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]),
            ([[0,2,3],[2,5,3]], [[0,3],[5,0]]),
            ([[1,2,1],[1,2,2],[1,2,3]], [[1,3],[2,0]]),
            ([[1,3,3],[2,4,4],[5,6,1]], [[1,3],[2,4],[4,0],[5,1],[6,0]]),
            ([[1,2,1],[2,3,2],[3,4,3]], [[1,1],[2,2],[3,3],[4,0]]),
            ([[1,10,10]], [[1,10],[10,0]]),
            ([[1,2,1],[1,2,2],[1,2,3],[2,3,1],[2,3,2],[2,3,3]], [[1,3],[3,0]]),
            ([[1,5,11],[2,7,6],[3,9,13],[12,16,7],[14,25,3],[19,22,18],[23,29,13],[24,28,4]], [[1,11],[3,13],[9,0],[12,7],[16,3],[19,18],[22,3],[23,13],[29,0]]),
            ([[0,2147483647,2147483647]], [[0,2147483647],[2147483647,0]]),
            ([[1,2,1],[1,2,2],[1,2,3],[2,3,1],[2,3,2],[2,3,3],[3,4,1],[3,4,2],[3,4,3]], [[1,3],[3,3],[4,0]]),
            ([[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5]], [[1,1],[2,2],[3,3],[4,4],[5,5],[6,0]]),
            ([[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6]], [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,0]]),
            ([[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[7,8,7]], [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,0]]),
            ([[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[7,8,7],[8,9,8]], [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,0]]),
            ([[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[7,8,7],[8,9,8],[9,10,9]], [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,0]]),
            ([[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[7,8,7],[8,9,8],[9,10,9],[10,11,10]], [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,0]]),
        ]
        passed = 0
        for idx, (buildings, expected) in enumerate(test_cases, 1):
            result = self.getSkyline(buildings)
            if result == expected:
                print(f"Test case {idx} passed.")
                passed += 1
            else:
                print(f"Test case {idx} failed: input={buildings}, expected={expected}, got={result}")
        print(f"Passed {passed}/{len(test_cases)} test cases.")

@measure_performance
def run_tests():
    sol = Solution()
    sol.test_getSkyline()

if __name__ == "__main__":
    run_tests()
